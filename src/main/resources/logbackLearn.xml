<?xml version="1.0" encoding="UTF-8" ?>
<!--
    scan:true 配置文件发生改变，会被重新加载
    scanPeriod scan=true 生效，每隔 60s 检查配置是否被修改
    debug:true 将打印出 logback 内部日志，实时查看内部运行状态，默认 false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--定义变量值，通过 <property> 定义的值会被插入到 logger 上下文中，可以使用 ${}-->
    <property name="APP_Name" value="myAppName"/>
    <contextName>${APP_Name}</contextName>

    <!--
    Logback 将写入日志事件的任务委托给一个名为 appender 的组件。它有两个属性name和class。
    name指定appender名称，class 指定类的全限定名用于实例化。
    <appender>元素可以包含 0 或一个 <layout> 元素，0 或多个 <encoder> 元素，0 或多个 <filter> 元素。
    除了这些公共的元素之外，<appender> 元素可以包含任意与 appender 类的 JavaBean 属性相一致的元素
    -->
    <!--
    RollingFileAppender 是一类appender其功能比较强大，因此被广泛应用。
    它将日志输出到 log.txt 文件，在满足了特定的条件之后，将日志输出到另外一个文件
    -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--RollingPolicy，它负责日志轮转的记录策略(TriggeringPolicy，它负责日志轮转的记录时机)-->
        <!--
            <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，
                如果上级目录不存在会自动创建，没有默认值。
            <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
            <encoder>：对记录事件进行格式化。包括两个功能，
                一是把日志信息转换成字节数组，二是把字节数组写入到输出流。
                PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<pattern>节点，用来设置日志
                的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义
            <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，
                但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
            <rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。
                属性class定义具体的滚动策略类。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
           <fileNamePattern>log/logFile.%d{yy-MM-dd HH:mm}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--Filter 日志过滤器-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--将日志信息过滤，常用 LevelFilter 等级过滤来过滤-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--指定特定等级-->
            <level>INFO</level>
            <!--如果匹配则输出-->
            <onMatch>ACCEPT</onMatch>
            <!--如果不匹配则过滤-->
            <onMisMatch>DENY</onMisMatch>
        </filter>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{30} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--Logger 子节点 日志输出级别
        设置某一个包或具体某一个类的日志级别，有三个属性
        name: logger 约束的某一个包或具体类
        可选 level: 日志打印级别，大小写无关，TRACE、DEBUG、INFO、WARN、ERROR、ALL、OFF
                    INHERITED 或 NULL 或未设置，会执行上级的级别
        可选 addtivity:是否向上级 logger 传递打印信息，默认 true
        -->
    <logger name="io.netty" level="ERROR"/>
    <logger name="org.apache" level="ERROR"/>
    <logger name="org.mybatis" level="ERROR"/>
    <logger name="org.springframework" level="ERROR"/>
    <logger name="org.jboss" level="ERROR"/>
    <logger name="javax" level="ERROR"/>
    <logger name="com.fasterxml" level="ERROR"/>
    <logger name="com.alibaba" level="WARN"/>

    <!--root 节点  它也是一个logger节点元素，不过它是一个根logger，也就是是所有logger的上级节点。
    只有一个level属性，因为name已经被命名为"root",且已经是最上级
    不能设置为INHERITED或者同义词NULL。 默认是DEBUG-->
    <root level="DEBUG">
        <appender-ref ref="FILE"/>
        <appender-ref ref="CONSOLE"/>
    </root>



</configuration>